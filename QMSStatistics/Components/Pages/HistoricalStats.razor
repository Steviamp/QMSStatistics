@page "/historical"
@using QMSStatistics.Models
@using QMSStatistics.Services
@inject IStatisticsService StatisticsService

<h3>Historical Branch Statistics</h3>

<h4>Filters</h4>
<div class="mb-4 d-flex gap-2">
    <InputDate @bind-Value="fromDate" class="form-control" />
    <InputDate @bind-Value="toDate" class="form-control" />

    <select class="form-select" @bind="selectedBranch">
        <option value="">All Branches</option>
        @foreach (var b in branches)
        {
            <option value="@b.OfficeNr">@b.OfficeNr - @b.OfficeName</option>
        }
    </select>

    <button type="button" class="btn btn-primary" @onclick="ApplyFilters">Apply</button>
</div>

<p class="text-muted">Επιλεγμένο κατάστημα: @selectedBranch</p>
<p class="text-muted">Πλήθος αποτελεσμάτων: @(stats?.Count ?? 0)</p>

@if (stats == null)
{
    <p>⚠️ Δεν βρέθηκαν στατιστικά.</p>
    <p>Loading...</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Office Nr</th>
                <th>Office Name</th>
                <th>Incoming</th>
                <th>Unattended</th>
                <th>Served</th>
                <th>Golden</th>
                <th>Avg Wait</th>
                <th>Avg Service</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in stats)
            {
                <tr>
                    <td>@s.OfficeNr</td>
                    <td>@s.OfficeName</td>
                    <td>@s.Incoming</td>
                    <td>@s.Unattended</td>
                    <td>@s.Served</td>
                    <td>@s.Golden</td>
                    <td>@s.AvgWait</td>
                    <td>@s.AvgService</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private DateTime fromDate = DateTime.Today.AddDays(-1);
    private DateTime toDate = DateTime.Today;
    private string? selectedBranch = null;

    private List<BranchStat>? stats;
    private List<Branch> branches = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync started");
        branches = await StatisticsService.GetAllBranchesAsync();
        Console.WriteLine($"Loaded branches: {branches.Count}");
        await LoadStatsAsync();
    }

    private async Task ApplyFilters()
    {
        Console.WriteLine($"Apply clicked with branch: {selectedBranch}");
        await LoadStatsAsync();
    }

    private async Task LoadStatsAsync()
    {
        Console.WriteLine("LoadStatsAsync CALLED");
        stats = await StatisticsService.GetHistoricalStatsAsync(fromDate, toDate, null, selectedBranch);
        StateHasChanged();
        Console.WriteLine($"Stats loaded: {stats?.Count ?? 0}");
    }
}
