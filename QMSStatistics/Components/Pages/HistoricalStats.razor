@page "/historical"
@using QMSStatistics.Models
@using QMSStatistics.Services
@inject IStatisticsService StatisticsService

<h3>Historical Branch Statistics</h3>

<h4>Filters</h4>
<div class="mb-4 d-flex gap-2">
    <InputDate @bind-Value="fromDate" @bind-Value:event="oninput"  class="form-control" />
    <InputDate @bind-Value="toDate" @bind-Value:event="oninput" class="form-control" />

    <select class="form-select" @bind="selectedBranch">
        <option value="">All Branches</option>
        @foreach (var b in branches)
        {
            <option value="@b.OfficeNr.ToString()">@b.OfficeNr - @b.OfficeName</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="ApplyFilters">Apply</button>
</div>

<p class="text-muted">Επιλεγμένο κατάστημα: @selectedBranch</p>
<p class="text-muted">Πλήθος αποτελεσμάτων: @(stats?.Count ?? 0)</p>

@if (stats == null)
{
    <p>⚠️ Δεν βρέθηκαν στατιστικά.</p>
    <p>Loading...</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Office Nr</th>
                <th>Office Name</th>
                <th>Incoming</th>
                <th>Unattended</th>
                <th>Served</th>
                <th>Golden</th>
                <th>Avg Wait</th>
                <th>Avg Service</th>
                <th>Avg Customer</th>
                <th>Obj. Wait %</th>
                <th>Obj. Service %</th>
                <th>Max Wait (sec)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in stats)
            {
                <tr>
                    <td>@s.OfficeNr</td>
                    <td>@s.OfficeName</td>
                    <td>@s.Incoming</td>
                    <td>@s.Unattended</td>
                    <td>@s.Served</td>
                    <td>@s.Golden</td>
                    <td>@Math.Round(s.AvgWaitSecs)</td>
                    <td>@Math.Round(s.AvgServiceSecs)</td>
                    <td>@Math.Round(s.AvgCustomerSecs)</td>
                    <td>@Math.Round(s.ObjectiveWaitPct)%</td>
                    <td>@Math.Round(s.ObjectiveServicePct)%</td>
                    <td>@s.MaxWaitSecs</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private DateTime fromDate = DateTime.Today.AddDays(-120);
    private DateTime toDate = DateTime.Today;
    private string? selectedBranch = null;

    private List<BranchStat>? stats;
    private List<Branch> branches = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync started");
        branches = await StatisticsService.GetAllBranchesAsync();
        Console.WriteLine($"Loaded branches: {branches.Count}");
        // Debug branch data
        foreach (var branch in branches.Take(3))
        {
            Console.WriteLine($"Branch: {branch.OfficeNr} - {branch.OfficeName}");
        }

        await LoadStatsAsync();
    }

    private async Task ApplyFilters()
    {
        Console.WriteLine("=== APPLY FILTERS CLICKED ===");
        Console.WriteLine($"ApplyFilters called - selectedBranch: '{selectedBranch}'");
        Console.WriteLine($"From: {fromDate}, To: {toDate}, Branch: '{selectedBranch}'");
        Console.WriteLine($"Apply clicked with branch: {selectedBranch}");
        try
        {
            await LoadStatsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ApplyFilters: {ex.Message}");
        }

    }

    private async Task LoadStatsAsync()
    {
        Console.WriteLine("LoadStatsAsync CALLED");
        Console.WriteLine($"Date range: {fromDate:yyyy-MM-dd} to {toDate:yyyy-MM-dd}");
        Console.WriteLine($"Selected branch: '{selectedBranch}'");
        Console.WriteLine($"Branch is null or empty: {string.IsNullOrEmpty(selectedBranch)}");

        stats = await StatisticsService.GetHistoricalStatsAsync(fromDate, toDate, null, selectedBranch);
        StateHasChanged();
        Console.WriteLine($"Stats loaded: {stats?.Count ?? 0}");
        if (stats != null && stats.Count > 0)
        {
            Console.WriteLine($"First result: Office {stats[0].OfficeNr} - {stats[0].OfficeName}");
            if (!string.IsNullOrEmpty(selectedBranch))
            {
                var filteredCount = stats.Count(s => s.OfficeNr.ToString() == selectedBranch);
                Console.WriteLine($"Records matching selected branch: {filteredCount}");
            }
        }

    }
}
